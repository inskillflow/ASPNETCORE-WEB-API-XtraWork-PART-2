╔═══════════════════════════════════════════════════════════════════╗
║                 XTRAWORK API - COMMANDES ESSENTIELLES             ║
╚═══════════════════════════════════════════════════════════════════╝

┌───────────────────────────────────────────────────────────────────┐
│ 1. DÉMARRAGE RAPIDE                                               │
└───────────────────────────────────────────────────────────────────┘

cd XtraWork
dotnet restore
dotnet run

URLs :
  → API       : https://localhost:7033
  → Swagger   : https://localhost:7033/swagger
  → Health    : https://localhost:7033/health

┌───────────────────────────────────────────────────────────────────┐
│ 2. COMPILATION & BUILD                                            │
└───────────────────────────────────────────────────────────────────┘

# Build du projet
dotnet build

# Build sans cache
dotnet build --no-incremental

# Clean + Build
dotnet clean
dotnet build

# Lancer avec rechargement automatique
dotnet watch run

┌───────────────────────────────────────────────────────────────────┐
│ 3. TESTS RAPIDES                                                  │
└───────────────────────────────────────────────────────────────────┘

# Test Health Check
curl -k https://localhost:7033/health

# Test avec le script automatisé
cd scripts
.\test-api.ps1

# Test inscription (PowerShell)
Invoke-RestMethod -Uri "https://localhost:7033/api/auth/register" `
  -Method Post -ContentType "application/json" `
  -Body '{"username":"admin","email":"admin@test.com","password":"Admin123!","firstName":"Jean","lastName":"Admin"}' `
  -SkipCertificateCheck

┌───────────────────────────────────────────────────────────────────┐
│ 4. BASE DE DONNÉES                                                │
└───────────────────────────────────────────────────────────────────┘

# Créer une migration
dotnet ef migrations add NomDeLaMigration

# Appliquer les migrations
dotnet ef database update

# Lister les migrations
dotnet ef migrations list

# Supprimer la base de données
dotnet ef database drop

# Créer un script SQL de migration
dotnet ef migrations script

┌───────────────────────────────────────────────────────────────────┐
│ 5. GESTION DES PACKAGES                                           │
└───────────────────────────────────────────────────────────────────┘

# Restaurer les packages
dotnet restore

# Lister les packages installés
dotnet list package

# Ajouter un package
dotnet add package NomDuPackage

# Mettre à jour un package
dotnet add package NomDuPackage --version X.X.X

┌───────────────────────────────────────────────────────────────────┐
│ 6. LOGS & MONITORING                                              │
└───────────────────────────────────────────────────────────────────┘

# Voir les logs en temps réel (console)
# Regarder le terminal où dotnet run est lancé

# Lire les derniers logs fichier
cd logs
Get-Content xtrawork-*.txt -Tail 50

# Surveiller les logs en continu
Get-Content xtrawork-*.txt -Wait

┌───────────────────────────────────────────────────────────────────┐
│ 7. AUTHENTIFICATION - EXEMPLES COMPLETS                           │
└───────────────────────────────────────────────────────────────────┘

# 1. Inscription
$registerBody = @{
    username = "admin"
    email = "admin@xtrawork.com"
    password = "Admin123!"
    firstName = "Jean"
    lastName = "Admin"
} | ConvertTo-Json

$response = Invoke-RestMethod "https://localhost:7033/api/auth/register" `
  -Method Post -ContentType "application/json" `
  -Body $registerBody -SkipCertificateCheck

$token = $response.token

# 2. Connexion
$loginBody = @{
    username = "admin"
    password = "Admin123!"
} | ConvertTo-Json

$response = Invoke-RestMethod "https://localhost:7033/api/auth/login" `
  -Method Post -ContentType "application/json" `
  -Body $loginBody -SkipCertificateCheck

$token = $response.token

# 3. Utiliser le token
$headers = @{ Authorization = "Bearer $token" }
Invoke-RestMethod "https://localhost:7033/api/titles" `
  -Headers $headers -SkipCertificateCheck

┌───────────────────────────────────────────────────────────────────┐
│ 8. CHANGER LE RÔLE D'UN UTILISATEUR                               │
└───────────────────────────────────────────────────────────────────┘

# Via SQL Server
sqlcmd -S . -E -Q "USE XtraWork; UPDATE Users SET Role = 'Admin' WHERE Username = 'admin';"

# Ou via SSMS
USE XtraWork;
UPDATE Users SET Role = 'Admin' WHERE Username = 'admin';

# Rôles disponibles : User, Manager, Admin

┌───────────────────────────────────────────────────────────────────┐
│ 9. CONFIGURATION                                                  │
└───────────────────────────────────────────────────────────────────┘

# User Secrets (pour clés sensibles)
dotnet user-secrets init
dotnet user-secrets set "Jwt:Key" "VOTRE_CLE_SECRETE"
dotnet user-secrets list

# Variables d'environnement
$env:ASPNETCORE_ENVIRONMENT = "Production"
$env:ASPNETCORE_URLS = "https://localhost:7033"

┌───────────────────────────────────────────────────────────────────┐
│ 10. SWAGGER UI - UTILISATION                                     │
└───────────────────────────────────────────────────────────────────┘

1. Ouvrir : https://localhost:7033/swagger
2. Tester POST /api/auth/login avec :
   {
     "username": "admin",
     "password": "Admin123!"
   }
3. Copier le token dans la réponse
4. Cliquer sur "Authorize" 🔓
5. Entrer : Bearer VOTRE_TOKEN
6. Cliquer "Authorize"
7. Tous les endpoints sont maintenant accessibles !

┌───────────────────────────────────────────────────────────────────┐
│ 11. DÉPLOIEMENT                                                   │
└───────────────────────────────────────────────────────────────────┘

# Publier pour production
dotnet publish --configuration Release --output ./publish

# Lancer la version publiée
cd publish
dotnet XtraWork.dll --environment=Production

┌───────────────────────────────────────────────────────────────────┐
│ 12. TROUBLESHOOTING                                               │
└───────────────────────────────────────────────────────────────────┘

# Port déjà utilisé ?
# → Modifier Properties/launchSettings.json

# Cannot connect to database ?
# → Vérifier SQL Server : services.msc → SQL Server
# → Tester : sqlcmd -S . -E -Q "SELECT @@VERSION"

# Jwt:Key manquant ?
# → dotnet user-secrets set "Jwt:Key" "CLE_64_CARACTERES"

# 401 Unauthorized ?
# → Vérifier format : "Authorization: Bearer {token}"
# → Vérifier token non expiré (24h)

┌───────────────────────────────────────────────────────────────────┐
│ 13. VÉRIFICATIONS RAPIDES                                         │
└───────────────────────────────────────────────────────────────────┘

# Vérifier .NET version
dotnet --version

# Vérifier SQL Server
sqlcmd -S . -E -Q "SELECT @@VERSION"

# Vérifier les packages
dotnet list package

# Vérifier la compilation
dotnet build --no-incremental

# Vérifier les migrations
dotnet ef migrations list

┌───────────────────────────────────────────────────────────────────┐
│ 14. DOCUMENTATION                                                 │
└───────────────────────────────────────────────────────────────────┘

→ README.md                    : Documentation complète
→ DEMARRAGE_RAPIDE.md          : Guide 5 minutes
→ CORRECTIONS_EFFECTUEES.md    : Liste des corrections
→ COMMANDES_ESSENTIELLES.txt   : Ce fichier

┌───────────────────────────────────────────────────────────────────┐
│ 15. ENDPOINTS PRINCIPAUX                                          │
└───────────────────────────────────────────────────────────────────┘

┌──────────────┬──────────────────────────┬──────────┬────────────┐
│ Méthode      │ Endpoint                 │ Auth     │ Rôle       │
├──────────────┼──────────────────────────┼──────────┼────────────┤
│ GET          │ /health                  │ Non      │ -          │
│ POST         │ /api/auth/register       │ Non      │ -          │
│ POST         │ /api/auth/login          │ Non      │ -          │
│ GET          │ /api/auth/me             │ Oui      │ User+      │
│ GET          │ /api/titles              │ Oui      │ User+      │
│ POST         │ /api/titles              │ Oui      │ Admin      │
│ PUT          │ /api/titles/{id}         │ Oui      │ Manager+   │
│ DELETE       │ /api/titles/{id}         │ Oui      │ Admin      │
│ GET          │ /api/employees           │ Oui      │ User+      │
│ POST         │ /api/employees           │ Oui      │ User+      │
│ PUT          │ /api/employees/{id}      │ Oui      │ User+      │
│ DELETE       │ /api/employees/{id}      │ Oui      │ Manager+   │
└──────────────┴──────────────────────────┴──────────┴────────────┘

╔═══════════════════════════════════════════════════════════════════╗
║                        AIDE RAPIDE                                ║
╚═══════════════════════════════════════════════════════════════════╝

🚀 Démarrer      : dotnet run
🧪 Tester        : cd scripts; .\test-api.ps1
🌐 Swagger       : https://localhost:7033/swagger
💊 Health        : https://localhost:7033/health
📝 Logs          : logs/xtrawork-*.txt
📚 Aide complète : README.md

╔═══════════════════════════════════════════════════════════════════╗
║                     BON DÉVELOPPEMENT ! 🎉                        ║
╚═══════════════════════════════════════════════════════════════════╝
